{:block-property
 {:query [:find (pull ?b [*])
          :in $ ?prop ?prop-value %
          :where
          [(keyword ?prop) ?prop-k]
          (block-property ?b ?prop-k ?prop-value)
          #_(block-property ?b :name ?name)
          #_(block-property ?b2 :author ?name)]
  :desc "List all blocks that have property equal to property value"
  :default-args ["type" "person"]}

 :all-properties
 {:query [:find (pull ?b [*])
          :in $ %
          :where
          [?b :block/properties ?prop]
          [(missing? $ ?b :block/name)]]
  :desc "List all properties"}

 :all-property-counts
 {:query :all-properties
  :result-transform (fn [result]
                      (->> result
                           (map (fn [m] (zipmap (keys (:block/properties m)) (repeat 1))))
                           (apply merge-with +)
                           (sort-by val >)))
  :desc "Counts for all properties"}

 :all-block-property
 {:query [:find (pull ?b [*])
          :in $ ?ks %
          :where
          (all-block-property ?b ?prop ?ks)]
  :desc "List all properties for given property"}

 :property-counts
 {:query :all-block-property
  :result-transform (fn [result]
                      (->> result
                           (reduce (fn [acc e]
                                     (update-in acc [(get-in e [:block/properties :type])] (fnil inc 0))) {})
                           (sort-by val >)))
  :default-args ["type"]
  :desc "Counts for given property by type"}

 :page-property
 {:query [:find (pull ?things [*])
          :in $ ?region %
          :where
          (page-name-property ?_b ?country :region ?region)
          (page-name-property ?_b2 ?author :country-of-origin ?country)
          (page-name-property ?things ?_name :authored-by ?author)]
  :desc "Practice page property query"
  :default-args ["Middle East"]}

 :page-names
 {:query [:find ?n
          :in $ %
          :where
          [?_b :block/name ?n]]
  :desc "List all page names"}

 :todos
 {:query [:find (pull ?b
                      [* :block/parent {:block/page [:db/id :block/name]}])
          :in $ %
          :where
          [?b :block/marker ?_marker]]
  :desc "List all todos"}

 :todos-by-page
 {:query :todos
  :result-transform (fn [result]
                      (->> (update-vals
                            (group-by (fn [x] (get-in x [:block/page :block/name])) result) count)
                           (sort-by val >)))
  :desc "todos count by page"}

 :todos-by-marker
 {:query :todos
  :result-transform (fn [result]
                      (update-vals (group-by :block/marker result) count))
  :desc "todos count by marker"}}
